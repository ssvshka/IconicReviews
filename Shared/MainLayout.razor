@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStorage
@inherits LayoutComponentBase

<MudThemeProvider Theme="_theme" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudToolBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <LoginDisplay/>
        <MudSpacer/>
        <SearchComponent DivClass="d-none d-sm-flex" />
        <ChooseLanguage />
        <MudToggleIconButton ToggledChanged="SetTheme" Icon="@GetIcon()" ToggledIcon="@GetIcon()" />
    </MudToolBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <MyNavMenu/>
    </MudDrawer>
    <MudMainContent Class="pa-1">
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode;
    private MudTheme _theme = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await ProtectedLocalStorage.GetAsync<bool>("isDarkMode");
        _isDarkMode = result.Success ? result.Value : false;
        StateHasChanged();
    }

    private async Task<bool> SetTheme()
    {
        _isDarkMode = !_isDarkMode;
        await ProtectedLocalStorage.SetAsync("isDarkMode", _isDarkMode);
        return _isDarkMode;
    }

    private void DrawerToggle()
        => _drawerOpen = !_drawerOpen;

    private string GetIcon()
        => _isDarkMode ? Icons.Material.Filled.WbSunny : Icons.Material.Filled.Nightlight;
}