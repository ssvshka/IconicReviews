@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inherits LayoutComponentBase

<MudThemeProvider Theme="_theme" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <LoginDisplay/>
        <MudSpacer />
        <SearchComponent />
        <MudToggleIconButton ToggledChanged="SetTheme" Icon="@GetIcon()" ToggledIcon="@GetIcon()" />
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <MyNavMenu/>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode;
    private MudTheme _theme = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await ProtectedSessionStore.GetAsync<bool>("isDarkMode");
            _isDarkMode = result.Success ? result.Value : false;
            StateHasChanged();
        }
    }

    private async Task<bool> SetTheme()
    {
        _isDarkMode = !_isDarkMode;
        await ProtectedSessionStore.SetAsync("isDarkMode", _isDarkMode);
        return _isDarkMode;
    }

    private void DrawerToggle()
        => _drawerOpen = !_drawerOpen;

    private string GetIcon()
        => _isDarkMode ? Icons.Material.Filled.WbSunny : Icons.Material.Filled.Nightlight;
}