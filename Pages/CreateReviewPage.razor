@page "/CreateReview"

<MudPaper Class="d-flex flex-wrap gap-4 ml-4" MaxWidth="528px" Elevation="0">
    <MudPaper>
        <MudTextField T="string" Label="Title" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true"></MudTextField>
    </MudPaper>
    <MudPaper>
        <MudTextField T="string" Label="Title" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true"></MudTextField>
    </MudPaper>
    <MudSelect @bind-Value="Group" Label="Default Focus" Dense="true" Variant="Variant.Outlined">
        <MudSelectItem Value="Group">Game</MudSelectItem>
        <MudSelectItem Value="Group">Movie</MudSelectItem>
        <MudSelectItem Value="Group">Album</MudSelectItem>
        <MudSelectItem Value="Group">Book</MudSelectItem>
    </MudSelect>
    <MudAutocomplete T="string" Label="Tags" @bind-Value="tag" SearchFunc="@Search1" Variant="Variant.Outlined" />
</MudPaper>
@code {
    private string? Group;
    private string? tag;
    private string[] tags = { "Bloody", "Hell" };
    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return tags;
        return tags.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
