@page "/CreateReview"
@using TinyMCE.Blazor
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> ContextFactory

<MudPaper Class="d-flex flex-wrap gap-4 ml-4" MaxWidth="528px" Elevation="0">
    <MudPaper>
        <MudTextField T="string" Label="Review Title" @bind-Value="reviewTitle" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true"></MudTextField>
    </MudPaper>
    <MudPaper>
        <MudTextField T="string" Label="Work Title" @bind-Value="workTitle" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true"></MudTextField>
    </MudPaper>
    <MudSelect @bind-Value="group" Label="Group" Dense="true" Variant="Variant.Outlined">
        @foreach (var item in groups)
        {
            <MudSelectItem Value="@item">@item</MudSelectItem>
        }
    </MudSelect>
    <MudAutocomplete T="string" @bind-Value="tag" Label="Tags" SearchFunc="@Search1" Variant="Variant.Outlined" />
    <Editor @bind-Value="text" />
    <MudRating @bind-SelectedValue="rating"/>
    <MudButton Variant="Variant.Filled">Publish</MudButton>
</MudPaper>

@code {
    private List<string> groups = new();
    private List<string> allTags = new();
    private string reviewTitle = default!;
    private string workTitle = default!;
    private string group = default!;
    private string tag = default!;
    private string text = default!;
    private List<Tag> reviewTags = new();
    private int rating;

    protected override void OnInitialized()
    {

    }

    private async Task<IEnumerable<string>> Search1(string value)
    {
        if (string.IsNullOrEmpty(value))
        {    
            return allTags;
        }
        return await allTags.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)).AsQueryable().ToListAsync();
    }
}
