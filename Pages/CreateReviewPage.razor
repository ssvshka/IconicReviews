@using TinyMCE.Blazor
@using Microsoft.EntityFrameworkCore
@page "/CreateReview"
@inject IDbContextFactory<ApplicationDbContext> ContextFactory

<MudPaper Class="d-flex flex-wrap gap-4 ml-4" MaxWidth="528px" Elevation="0">
    <MudPaper>
        <MudTextField T="string" Label="Review Title" @bind-Value="review.Title" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true"></MudTextField>
    </MudPaper>
    <MudPaper>
        <MudTextField T="string" Label="Work Title" @bind-Value="review.Subject.Title" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true"></MudTextField>
    </MudPaper>
    <MudSelect @bind-Value="review.Subject.Group" Label="Default Focus" Dense="true" Variant="Variant.Outlined">
        <MudSelectItem Value="group">Game</MudSelectItem>
        <MudSelectItem Value="group">Movie</MudSelectItem>
        <MudSelectItem Value="group">Album</MudSelectItem>
        <MudSelectItem Value="group">Book</MudSelectItem>
    </MudSelect>
    <MudAutocomplete T="string" Label="Tags" SearchFunc="@Search1" Variant="Variant.Outlined" />
    <Editor @bind-Value="review.Text"/>
</MudPaper>
@code {
    private string? group;
    private List<string> tags = new();

    private Review review = new Review();

    protected override void OnInitialized()
    {
        GetTags();
    }

    private async Task CreateReview()
    {
        using (var ctx = ContextFactory.CreateDbContext())
        {
            ctx.Reviews.Add(review);
            await ctx.SaveChangesAsync();
        }
    }

    private async Task<IEnumerable<string>> Search1(string value)
    {
        if (string.IsNullOrEmpty(value))
        {    
            return tags;
        }
        return await tags.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)).AsQueryable().ToListAsync();
    }

    private void GetTags()
    {
        using (var ctx = ContextFactory.CreateDbContext())
        {
            foreach (var t in ctx.Tags)
            {
                tags.Add(t.TagId);
            }
        }
    }
}
