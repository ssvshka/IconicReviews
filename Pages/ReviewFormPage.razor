@page "/ReviewForm"
@using CourseProject.Services
@using TinyMCE.Blazor
@inject ReviewService reviewService
@inject ViewService viewService
@inject UserService userService
@inject NavigationManager navigationManager

<AuthorizeView>
    <Authorized>
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudForm>
                        <MudSelect T="Category" ValueChanged="SetCategory" Label="Category" Dense="true" Variant="Variant.Outlined">
                            @if (viewService.Categories is not null)
                            {
                                @foreach (var item in viewService.Categories!)
                                {
                                    <MudSelectItem Value="@item"/>
                                }
                            }
                        </MudSelect>
                        <MudTextField T="string" Label="Review Title" @bind-Value="review.Title" 
                                            Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true"></MudTextField>
                        <MudAutocomplete T="string" Label="Work" SearchFunc="@SearchWorks" @bind-Value="workTitle"
                                            Variant="Variant.Outlined" OnBlur="CreateWork" CoerceValue="true" Disabled="isCategoryNull"/>
                        <MudAutocomplete T="Tag" Label="Tags" ValueChanged="AddTag" SearchFunc="@SearchTags" 
                                            Variant="Variant.Outlined" CoerceValue="true" />
                        <MudItem xs="12" md="12">
                            <MudText Class="mb-n3" Typo="Typo.body2">
                                Selected tags: 
                                @foreach (var t in reviewTags)
                                {
                                    <MudChip>@(t?.ToString())</MudChip>
                                }
                            </MudText>
                        </MudItem>
                        <br /> <br /> <br />
                        <Editor @bind-Value="review.Text" />
                        <UploadBlobsComponent @bind-ImageUrl="review.ImageUrl"/>
                        <MudRating @bind-SelectedValue="rating" MaxValue="10" />
                        <MudButton OnClick="PublishReviewAndRedirectToHome" @onkeydown="@Enter" Variant="Variant.Filled">Publish</MudButton>
                    </MudForm>   
                </MudPaper>
            </MudItem>
        </MudGrid>
    </Authorized>
    <NotAuthorized>
        You have to log in to write a review.
    </NotAuthorized>
</AuthorizeView>

@code {
    const string DEFAULT_IMAGE = "https://placehold.co/600x400/EEE/31343C?font=lora&text=Oops...+Image+is+missing";
    
    private Category category = default!;
    private Work work = default!;
    private string workTitle = "";
    private List<Tag> reviewTags = new();
    private int rating;
    private bool isCategoryNull = true;

    private Review review = new();

    protected override async Task OnInitializedAsync()
    {
        if (viewService.Tags is null)
            await viewService.GetTagsAsync();
        await viewService.GetCategoriesAsync();
    }

    private async Task PublishReviewAndRedirectToHome()
    {
        await SetReviewData();
        await reviewService.AddReview(review);
        navigationManager.NavigateTo("/");
    }

    private async Task SetReviewData()
    {
        await SetWork();
        await reviewService.CalculateAuthorRating(work.Id, rating);
        review.WorkId = work.Id;
        review.PostedOn = DateTime.Now;
        review.UserId = await userService.GetCurrentUserId();
        if (review.ImageUrl is null)
            review.ImageUrl = DEFAULT_IMAGE;
        SetReviewTags();
    }

    private void SetCategory(Category value)
    {
        category = value;
        isCategoryNull = false;
    }

    private async Task SetWork()
    {
        if (!await reviewService.FindWorkByTitle(workTitle))
        {    
            CreateWork();
            await reviewService.AddWork(work);
        }
        else work = await reviewService.GetWorkByTitle(workTitle);
    }

    private void CreateWork()
    {
        work = new Work
            {
                Title = workTitle,
                CategoryId = category.Id,
            };
    }

    private void SetReviewTags()
    {
        review.TagsLink = new List<ReviewTag>();
        foreach (var t in reviewTags)
        {
            review.TagsLink.Add(new ReviewTag
            {
                ReviewId = review.Id,
                TagId = t.Id
            });
        }
    }

    private async Task AddTag(Tag tag)
    {
        if (!viewService.Tags!.Contains(tag))
            await reviewService.AddTag(tag);

        if (!reviewTags.Contains(tag))
            reviewTags.Add(tag);
    }

    private async Task<IEnumerable<Tag>> SearchTags(string value)
    {
        if (string.IsNullOrEmpty(value))
            return viewService.Tags!;
        return await viewService.FindTagsByValueAsync(value);
    }

    private async Task<IEnumerable<string>> SearchWorks(string value)
    {
        await viewService.GetWorksByCategoryAsync(category.Id);
        if (string.IsNullOrEmpty(value))
        {    
            return viewService.Works!
                .Select(x => x.Title);
        }
        return viewService.Works!
            .Where(x => x.Title.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.Title);
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            await PublishReviewAndRedirectToHome();
    }
}
