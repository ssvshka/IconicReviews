@using CourseProject.Services;
@using Microsoft.EntityFrameworkCore;
@using TinyMCE.Blazor
@inject ReviewService reviewService
@inject NavigationManager navigationManager

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm>
                <MudSelect T="Category" @bind-Value="review.Work.Category" Label="Category" Dense="true" Variant="Variant.Outlined">
                    @foreach (var item in allCategories)
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField T="string" Label="Review Title" @bind-Value="review.Title"
                              Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true"></MudTextField>
                <MudAutocomplete T="Work" Label="Work" @bind-Value="review.Work" SearchFunc="@SearchWorks"
                                 Variant="Variant.Outlined" CoerceValue=true />
                <MudAutocomplete T="Tag" Label="reviewTags" ValueChanged="AddTag" SearchFunc="@SearchTags"
                                 Variant="Variant.Outlined" CoerceValue="true" />
                <MudItem xs="12" md="12">
                    <MudText Class="mb-n3" Typo="Typo.body2">
                        Selected tags:
                        @foreach (var t in reviewTags)
                        {
                            <MudChip>@(t?.ToString())</MudChip>
                        }
                    </MudText>
                </MudItem>
                <br /> <br /> <br />
                <Editor @bind-Value="review.Text" />
                <MudTextField T="string" Label="Image Link" @bind-Value="review.ImageUrl"
                              Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true"></MudTextField>
                <MudRating @bind-Value="rating" MaxValue="10" />
                <MudButton OnClick="PublishReviewAndRedirectToHome" Variant="Variant.Filled">Publish</MudButton>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private List<Category> allCategories = new();
    private List<Work> allWorks = new();
    private List<Tag> allTags = new();
    private Category category = new();
    private List<Tag> reviewTags = new();
    private decimal rating;

    private Review review = new();

    [Parameter]
    public int ReviewId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        allTags = await reviewService.GetTags();
        allCategories = await reviewService.GetCategories();
        //allWorks = await reviewService.GetWorks();
        review = await reviewService.GetReviewByIdAsync(ReviewId);
    }

    private async Task PublishReviewAndRedirectToHome()
    {
        await reviewService.EditReview(review);
        navigationManager.NavigateTo("/");
    }

    private void SetReviewTags()
    {
        review.TagsLink = new List<ReviewTag>();
        foreach (var t in reviewTags)
        {
            review.TagsLink.Add(new ReviewTag
                {
                    ReviewId = review.Id,
                    TagId = t.Id
                });
        }
    }

    private void AddTag(Tag value)
    {
        if (!allTags.Contains(value))
            allTags.Add(value);

        if (!reviewTags.Contains(value))
            reviewTags.Add(value);
    }

    private async Task<IEnumerable<Tag>> SearchTags(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return allTags;
        return allTags.Where(x => x.Title.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<Work>> SearchWorks(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return allWorks;
        return allWorks.Where(x => x.Title.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
