@using CourseProject.Services
@inject ViewService viewService
@inject NavigationManager navigationManager

@if (viewService.Reviews is not null)
{
    @foreach (var r in viewService.Reviews!)
    {
        <MudCard>
            <MudCardMedia Image=@r.ImageUrl Height="200"/>
            <MudCardContent>
                <MudText Typo="Typo.h5">@r.Title</MudText>
                <MudText Typo="Typo.body2">@r.Text</MudText>
                <MudText Typo="Typo.caption">Posted by @r.Author</MudText>
                <MudText Typo="Typo.caption">on @r.PostedOn</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit" OnClick="() => NavigateToEditForm(r.Id)"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="() => DeleteReview(r)"></MudIconButton>
            </MudCardActions>
        </MudCard>
    }
}
@code {
    protected override void OnInitialized()
    {
        viewService.ListChanged += OnListChanged;
    }

    private void OnListChanged(object? sender, EventArgs e)
        => this.InvokeAsync(this.StateHasChanged);

    private async Task DeleteReview(Review review)
        => await viewService.DeleteReviewAsync(review);

    private void NavigateToEditForm(int reviewId)
        => navigationManager.NavigateTo($"/Edit/{reviewId}");

    public void Dispose()
        => viewService.ListChanged -= OnListChanged;
}
