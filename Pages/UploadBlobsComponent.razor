@page "/blobfiles"
@inject AzureStorageHelper AzureStorageHelper
@inject IStringLocalizer<App> Localizer

<MudStack Style="width: 100%" Class="py-2">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChange" Hidden="@uploading"
                   Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                   @ondragenter="@HandleDragEnter" @ondragleave="@HandleDragLeave" @ondragend="@HandleDragLeave">
        <ButtonTemplate>
            <MudPaper Height="200px" Outlined="true" Class="@dropClass">
                @if(uploading)
                {
                    <MudText Typo="Typo.h6">@Localizer["Uploading"]...</MudText>
                }
                else
                {
                    <MudText Typo="Typo.h6">@Localizer["Drag and drop files here or click"]</MudText>
                }
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
</MudStack>

@if (!string.IsNullOrWhiteSpace(ImageUrl))
{
    <MudImage Class="pa-2" Src="@ImageUrl" Width="332" Height="250"></MudImage>
    <br />
}

@code
{
    [Parameter]
    public string ImageUrl { get; set; } = "";
    [Parameter]
    public EventCallback<string> ImageUrlChanged { get; set; }

    private bool uploading = false;
    private string dropClass = string.Empty;

    private void HandleDragEnter()
        => dropClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";

    private void HandleDragLeave()
        => dropClass = string.Empty; 

    private async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        dropClass = string.Empty;
        uploading = true;
        await InvokeAsync(StateHasChanged);
        string oldFileName = Path.GetFileNameWithoutExtension(args.File.Name);
        string newFileNameWithTicks = $"{oldFileName}-{DateTime.Now.Ticks.ToString()}.png";
        await AzureStorageHelper.UploadImageAsync(newFileNameWithTicks, args.File);
        ImageUrl = AzureStorageHelper.GetUrlName(newFileNameWithTicks);
        await ImageUrlChanged.InvokeAsync(ImageUrl);
        uploading = false;
    }
}