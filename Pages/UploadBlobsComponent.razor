@page "/blobfiles"
@inject AzureStorageHelper AzureStorageHelper

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChange" Hidden="@uploading"
                   Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                   @ondragenter="@HandleDragEnter" @ondragleave="@HandleDragLeave" @ondragend="@HandleDragLeave">
        <ButtonTemplate>
            <MudPaper Height="300px" Outlined="true" Class="@dropClass">
                <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
</MudStack>

@if (ImageUrl != "")
{
    <img src="@ImageUrl" />
    <br />
    <br />
}

@code
{
    [Parameter]
    public string ImageUrl { get; set; } = "";
    [Parameter]
    public EventCallback<string> ImageUrlChanged { get; set; }

    private bool uploading = false;
    private string dropClass = string.Empty;

    private void HandleDragEnter()
        => dropClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";

    private void HandleDragLeave()
        => dropClass = string.Empty; 

    private async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        dropClass = string.Empty;
        uploading = true;
        await InvokeAsync(StateHasChanged);
        string oldFileName = Path.GetFileNameWithoutExtension(args.File.Name);
        string newFileNameWithTicks = $"{oldFileName}-{DateTime.Now.Ticks.ToString()}.png";
        await AzureStorageHelper.UploadImageAsync(newFileNameWithTicks, args.File);
        ImageUrl = AzureStorageHelper.GetUrlName(newFileNameWithTicks);
        await ImageUrlChanged.InvokeAsync(ImageUrl);
        uploading = false;
    }
}