@page "/MyReviews"
@page "/MyReviews/{userId}"
@using CourseProject.Services
@inject ViewService viewService
@inject UserService userService
@inject NavigationManager navigationManager
@inject IStringLocalizer<App> Localizer

@if (viewService.UserReviews is null || user is null)
{
    <MudText Class="pa-4">@Localizer["Loading"]...</MudText>
}
else if (!viewService.UserReviews.Any())
{
    <MudText Class="pa-4">@Localizer["You dont have any reviews yet"]</MudText>
    <MudFab Class="ma-2" StartIcon="@Icons.Material.Filled.Edit" Label="@Localizer["Write a review"]"
        Href=@($"/WriteReview/{user.Id}") />
}
else
{
    <MudTable Items="@viewService.UserReviews" Filter="new Func<Review,bool>(FilterFunc)" >
        <ToolBarContent>
            <MudText Typo="Typo.h6" Class="mr-4">@Localizer["Reviews of"] @user.Email</MudText>
            <MudFab StartIcon="@Icons.Material.Filled.Edit" Label="@Localizer["Write a review"]" Href=@($"/WriteReview/{user.Id}") />
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder='@Localizer["Search"]' 
                Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Review, object>(x=>x.Title)">@Localizer["Review Title"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Review, object>(x=>x.Work.Category.Title)">@Localizer["Category"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Review, object>(x=>x.Work.Title)">@Localizer["Work"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Review, object>(x=>x.PostedOn)">@Localizer["Posted On"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Review, object>(x=>x.Work.OverallAuthorRating)">@Localizer["Author Rating"]</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: start">@Localizer["Open"]</MudTh>
            <MudTh Style="text-align: start">@Localizer["Edit"]</MudTh>
            <MudTh Style="text-align: start">@Localizer["Delete"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Review Title">@context.Title</MudTd>
            <MudTd DataLabel="Category">@context.Work.Category.Title</MudTd>
            <MudTd DataLabel="Product">@context.Work.Title</MudTd>
            <MudTd DataLabel="Posted On">@context.PostedOn.ToString("dd/MM/yyyy HH:mm")</MudTd>
            <MudTd DataLabel="Author Rating">@context.Work.OverallAuthorRating</MudTd>
            <MudTd DataLabel="Open"><MudIconButton Icon="@Icons.Material.Filled.OpenInNew" 
                Href=@($"/Review/{context.Id}")>@Localizer["Open"]</MudIconButton></MudTd>
            <MudTd DataLabel="Edit"><MudIconButton Icon="@Icons.Material.Filled.Edit" 
                 Href=@($"/Edit/{context.Id}")></MudIconButton></MudTd>
            <MudTd DataLabel="Delete"><MudIconButton Icon="@Icons.Material.Filled.Delete" 
                OnClick="() => DeleteReview(context)"></MudIconButton></MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    [Parameter]
    public string userId { get; set; } = "";
    private string searchString = "";
    private User user = default!;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(userId))
            user = await userService.GetCurrentUserAsync();
        else user = await userService.GetUserById(userId);
        await viewService.GetUserReviewsAsync(user.Id);
        viewService.ListChanged += OnListChanged;
    }

    private void OnListChanged(object? sender, EventArgs e)
        => this.InvokeAsync(this.StateHasChanged);

    private async Task DeleteReview(Review review)
    {
        await viewService.DeleteReviewAsync(review, user.Id);
    }

    private bool FilterFunc(Review review)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (review.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (review.Work.Category.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (review.Work.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public void Dispose()
        => viewService.ListChanged -= OnListChanged;
}
