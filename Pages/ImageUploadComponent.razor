@page "/imgupload"
@inject ISnackbar Snackbar

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" Hidden="@Uploading" 
        Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                   @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" >
        <ButtonTemplate>
            <MudPaper Height="300px" Outlined="true" Class="@DragClass">
                <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                @foreach (var file in fileNames)
                {
                    <MudChip Color="Color.Dark" Text="@file" />
                }
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudButton OnClick="Upload" Disabled="@(!fileNames.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
        <MudButton OnClick="Clear" Disabled="@(!fileNames.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
    </MudToolBar>
</MudStack>

@code {
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private List<string> fileNames = new List<string>();

    string ImageUrl = "";
    bool Uploading = false; 
    List<string> FileUrls = new List<string>();

    // support for drag/drop
    string dropClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ListFiles();
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs args)
    {
        ClearDragClass();
        //var files = args.GetMultipleFiles();
        //foreach (var file in files)
        //{
        //    fileNames.Add(file.Name);
        //}
        //dropClass = string.Empty;
        try
        {
            Uploading = true;
            await InvokeAsync(StateHasChanged);

            // Resize to no more than 400x400
            var format = "image/png";
            var resizedImageFile = await args.File.RequestImageFileAsync(format, 400, 400);

            // read resized png data into a buffer
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);

            // get new filename with a bit of entropy
            string justFileName = Path.GetFileNameWithoutExtension(args.File.Name);
            string newFileNameWithoutPath = $"{justFileName}-{DateTime.Now.Ticks.ToString()}.png";
            string filename = $"{Environment.CurrentDirectory}\\files\\{newFileNameWithoutPath}";

            // write the file
            File.WriteAllBytes(filename, buffer);

            ImageUrl = $"files/{newFileNameWithoutPath}";

            await ListFiles();

            Uploading = false;
        }
        catch (Exception ex)
        {
            Uploading = false;
            await InvokeAsync(StateHasChanged);
            System.Diagnostics.Debug.WriteLine(ex.Message);
            throw;
        }
    }

    void Upload()
    {
        
    }

    async Task ListFiles()
    {
        FileUrls.Clear();
        var files = Directory.GetFiles(Environment.CurrentDirectory + "\\Files", "*.*");
        foreach (var filename in files)
        {
            var file = Path.GetFileName(filename);
            string url = $"files/{file}";
            FileUrls.Add(url);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task Clear()
    {
        fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}