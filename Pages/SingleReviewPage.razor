@inject NavigationManager navigationManager
@inject ReviewService reviewService
@inject UserService userService
@inject ViewService viewService
@implements IAsyncDisposable
@inject IStringLocalizer<App> Localizer
@page "/review/{reviewId:int}"

@if (review is null)
{
    <text>Loading...</text>
}
else
{
    <MudCard>
        <MudCardContent>
            <MudImage Class="py-2 rounded-lg" Fluid="true" Src="@review.ImageUrl" />
            <MudText Typo="Typo.h5">@review.Title</MudText>
            <div class="d-flex flex-row">
                <MudText Typo="Typo.caption">@Localizer[$"{review.Work.Category}"]: @review.Work.Title </MudText>
                <MudText Class="ml-1" Typo="Typo.caption">@Localizer["Average rating"]: @review.Work.OverallAuthorRating/10</MudText>
                <MudSpacer />
                <MudText Typo="Typo.caption">@review.PostedOn.ToShortDateString()</MudText>
            </div>
            <MudMarkdown Value="@review.Text" />
            <div class="d-flex flex-row">
                <MudText Typo="Typo.caption">@review.User.Email</MudText>
                <MudSpacer/>
                <MudText Typo="Typo.caption">@review.Rating/10</MudText>
            </div>
        </MudCardContent>
    </MudCard>
    <AuthorizeView>
        <Authorized>
            <MudTextField T="string" Label="@Localizer["Leave a comment here"]" Variant="Variant.Outlined" @bind-Value="@comment.Text" Lines="3" />
            <MudButton Class="ma-1" OnClick="Send" Variant="Variant.Filled" Color="Color.Primary">Post</MudButton>
        </Authorized>
        <NotAuthorized>
            <MudText>@Localizer["Login to leave a comment"].</MudText>
        </NotAuthorized>
    </AuthorizeView>
    @if (viewService.Comments is not null)
    {
        @foreach (var c in viewService.Comments)
        {
            <CommentViewComp Comment="@c"></CommentViewComp>
        }
    }
}

@code {
    private HubConnection? hubConnection;
    [Parameter]
    public int ReviewId { get; set; }
    private Comment comment = default!;
    private Review review = default!;

    protected async override Task OnInitializedAsync()
    {
        review = await reviewService.GetReviewByIdAsync(ReviewId);
        await viewService.GetCommentsAsync(ReviewId);
        comment = new Comment();
        await OpenHubConnection();
    }

    private async Task OpenHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/commenthub"))
            .Build();

        hubConnection.On<Comment>("ReceiveComment", async (comment) =>
        {
            await viewService.GetCommentsAsync(ReviewId);
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await SetCommentProperties();
            await reviewService.AddCommentAsync(comment);
            await hubConnection.SendAsync("PostComment", comment);
            comment = new Comment();
        }
    }
    
    private async Task SetCommentProperties()
    {
        comment.LeftOn = DateTime.Now;
        comment.UserId = await userService.GetCurrentUserId();
        comment.ReviewId = ReviewId;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
