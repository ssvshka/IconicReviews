@inject IStringLocalizer<App> Localizer
@inject ViewService viewService
@inject UserService userService
@inject ReviewService reviewService
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar

<MudCard>
    <MudCardMedia Image=@Review.ImageUrl />
    <MudCardContent>
        <MudText Typo="Typo.h5">@Review.Title</MudText>
        <MudMarkdown Value="@Review.Text" />
        <div class="d-flex flex-column align-left">
            <MudText Typo="Typo.caption">@Localizer["Posted by"] @Review.User.Email</MudText>
            <AuthorizeView>
                <MudRating MaxValue="1" SelectedValue="selectedValue" @onclick="Like" 
                    FullIcon="@Icons.Material.Filled.ThumbUp" EmptyIcon="@Icons.Material.Outlined.ThumbUp" />
                <MudRating SelectedValueChanged="SetRating"
                           @onclick='() => Snackbar.Add("Your vote is taken!")' />
            </AuthorizeView>
            <MudText Typo="Typo.caption">@Localizer["Likes"]: @likesAmount</MudText>
            <MudText Typo="Typo.caption">@Localizer["Authors Rating"]: @Review.Work.OverallAuthorRating</MudText>
            <MudText Typo="Typo.caption">@Localizer["Users Rating"]: @Review.Work.OverallUserRating</MudText>
            <MudText Typo="Typo.caption">@Review.PostedOn.ToShortDateString()</MudText>
            <MudButton OnClick='() => NavigateTo("review", Review.Id)'>@Localizer["Open"]</MudButton>
        </div>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public Review Review { get; set; } = default!;
    [Parameter]
    public string CurrentUserId { get; set; } = default!;
    private int selectedValue;
    private int likesAmount;
    private int rating;

    protected override async Task OnInitializedAsync()
    {
        selectedValue = await userService.IsReviewLiked(CurrentUserId, Review.Id) ? 1 : 0;
        likesAmount = await userService.GetUserLikesAmount(Review.UserId);
        rating = await reviewService.GetUserRating(CurrentUserId, Review.WorkId);
    }

    private void NavigateTo(string page, int? reviewId = null)
        => navigationManager.NavigateTo($"/{page}/{reviewId}");

    private async Task Like()
    {
        if (selectedValue == 0)
        {
            await userService.AddLike(new Like
                {
                    ReviewId = Review.Id,
                    UserId = CurrentUserId,
                    LikedUserId = Review.UserId
                });
            selectedValue = 1;
            likesAmount++; 
        }
        else
        {    
            await userService.RemoveLike(CurrentUserId!, Review.Id);
            selectedValue = 0;
            likesAmount--;
        }
    }

    private async Task SetRating(int value)
    {
        if (rating == 0)
        {
            await reviewService.SetUserRating(new UserRating
            {
                Rating = value,
                UserId = CurrentUserId,
                WorkId = Review.WorkId
            });
            rating = value;
        }

        else
        {
            await reviewService.UpdateUserRating(CurrentUserId, Review.WorkId, value);
            rating = value;
        }
        await reviewService.UpdateOverallUserRating(Review.WorkId);
    }
}
