@inject NavigationManager navigationManager
@inject ReviewService reviewService
@inject UserService userService
@implements IAsyncDisposable

<MudTextField T="string" Label="Leave a comment here..." Variant="Variant.Outlined" Text="@comment.Text" Lines="3" />
<MudButton OnClick="Send" Variant="Variant.Filled" Color="Color.Primary">Post</MudButton>

@code {
    private HubConnection? hubConnection;
    private Comment comment = default!;
    [Parameter]
    public int ReviewId { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await OpenHubConnection();

        comment = new Comment();
    }

    protected override async Task OnParametersSetAsync()
    {
        await SetCommentProperties();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await SetCommentProperties();
            await reviewService.AddCommentAsync(comment);
            await hubConnection.SendAsync("PostComment", comment);
        }
    }

    private async Task OpenHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/commenthub"))
            .Build();
        await hubConnection.StartAsync();
    }

    private async Task SetCommentProperties()
    {
        comment.LeftOn = DateTime.Now;
        comment.UserId = await userService.GetCurrentUserId();
        comment.ReviewId = ReviewId;
    }

    //public bool IsConnected =>
    //    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
