@inject SearchService searchService
@page "/Search/{searchedText}"
@inject IStringLocalizer<App> Localizer

@if(reviews is null)
{
    <MudText Class="pa-4">@Localizer["Loading..."]</MudText>
}
else if (reviews.Count < 1)
{
    <MudText Class="pa-4">@Localizer["No results found!"]</MudText>
}
else
{
    @foreach (var r in reviews)
    {
        <MudCard>
            <MudCardContent>
                <MudLink Href="@($"/Review/{r.Id}")">@r.Title</MudLink>
                <MudMarkdown Value="@GetTextPart(r.Text)" />
            </MudCardContent>
        </MudCard>
    }
}

@code {
    [Parameter]
    public string? searchedText { get; set; }
    private List<Review> reviews = default!;
    private int textPart = 50;

    protected override async Task OnParametersSetAsync()
        => reviews = await searchService.Search(searchedText!);

    private string GetTextPart(string text)
    {
        if (text.Length >= textPart)
            return $"{text.Substring(0, textPart)}...";
        else return text;
    }
}
